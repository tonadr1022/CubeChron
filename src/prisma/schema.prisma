generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  password      String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  cubeSessions  CubeSession[]
  setting       Setting?
  solves        Solve[]
}

model CubeSession {
  id        String    @id @default(nanoid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  userId    String?
  notes     String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  solves    Solve[]
  Setting   Setting[]

  @@unique([userId, name])
  @@index([userId])
}

model Solve {
  id            String       @id @default(nanoid())
  createdAt     DateTime     @default(now())
  cubeSessionId String?
  scramble      String?
  cubeType      String
  notes         String?
  dnf           Boolean?     @default(false)
  plusTwo       Boolean?     @default(false)
  duration      Float
  userId        String?
  cubeSession   CubeSession? @relation(fields: [cubeSessionId], references: [id])
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Setting {
  id            String       @id @default(nanoid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userId        String       @unique
  focusMode     Boolean      @default(false)
  cubeType      String       @default("333")
  cubeSessionId String?
  cubeSession   CubeSession? @relation(fields: [cubeSessionId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
